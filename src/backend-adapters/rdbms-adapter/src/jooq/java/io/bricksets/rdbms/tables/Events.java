/*
 * This file is generated by jOOQ.
 */
package io.bricksets.rdbms.tables;


import io.bricksets.rdbms.Keys;
import io.bricksets.rdbms.Sandbox;
import io.bricksets.rdbms.tables.records.EventsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Events extends TableImpl<EventsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sandbox.events</code>
     */
    public static final Events EVENTS = new Events();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventsRecord> getRecordType() {
        return EventsRecord.class;
    }

    /**
     * The column <code>sandbox.events.id</code>.
     */
    public final TableField<EventsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>sandbox.events.position</code>.
     */
    public final TableField<EventsRecord, Long> POSITION = createField(DSL.name("position"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>sandbox.events.occurred_on</code>.
     */
    public final TableField<EventsRecord, LocalDateTime> OCCURRED_ON = createField(DSL.name("occurred_on"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>sandbox.events.event_class</code>.
     */
    public final TableField<EventsRecord, String> EVENT_CLASS = createField(DSL.name("event_class"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>sandbox.events.event_value</code>.
     */
    public final TableField<EventsRecord, JSONB> EVENT_VALUE = createField(DSL.name("event_value"), SQLDataType.JSONB.nullable(false), this, "");

    private Events(Name alias, Table<EventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Events(Name alias, Table<EventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sandbox.events</code> table reference
     */
    public Events(String alias) {
        this(DSL.name(alias), EVENTS);
    }

    /**
     * Create an aliased <code>sandbox.events</code> table reference
     */
    public Events(Name alias) {
        this(alias, EVENTS);
    }

    /**
     * Create a <code>sandbox.events</code> table reference
     */
    public Events() {
        this(DSL.name("events"), null);
    }

    public <O extends Record> Events(Table<O> child, ForeignKey<O, EventsRecord> key) {
        super(child, key, EVENTS);
    }

    @Override
    public Schema getSchema() {
        return Sandbox.SANDBOX;
    }

    @Override
    public Identity<EventsRecord, Long> getIdentity() {
        return (Identity<EventsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EventsRecord> getPrimaryKey() {
        return Keys.PK_EVENT;
    }

    @Override
    public List<UniqueKey<EventsRecord>> getKeys() {
        return Arrays.<UniqueKey<EventsRecord>>asList(Keys.PK_EVENT, Keys.UC_POSITION);
    }

    @Override
    public Events as(String alias) {
        return new Events(DSL.name(alias), this);
    }

    @Override
    public Events as(Name alias) {
        return new Events(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(String name) {
        return new Events(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(Name name) {
        return new Events(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, Long, LocalDateTime, String, JSONB> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
